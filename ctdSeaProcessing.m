function ctdSeaProcessing (varargin)
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Preprocessing software for CTD-LADCP                                     %
  % Autor slave: Pierre Rousselot / Date: 10/03/16                           %
  % Jedi master: Jacques Grelet                                              %
  % -> Copy data acquisition CTD file to processing path                     %
  % -> CTD SBE processing                                                    %
  % -> Copy data acquisition LADCP file to processing path                   %
  % -> ADCP Processing                                                       %
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  close all; clc;
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% Mode
  [debug_mode] = tools(varargin, nargin);
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% Handle
  fig = figure('Name', 'CTD-LADCP PreProcessing', ...
    'units', 'normalized', ...
    'menubar', 'no', ...
    'tag', 'F_PRECALIBRATION', ...
    'position', [0.1 0.1 .35 .7]);

  infogen_menu = uimenu(fig, 'Label', 'General information');

  menu_mode = uimenu(infogen_menu, 'Label', 'Mode');
  Debug_Mode = uimenu(menu_mode, 'Label', 'Debug', ...
    'callback', @DebugMode);
  Normal_Mode = uimenu(menu_mode, 'Label', 'Normal', ...
    'callback', @NormalMode, 'Checked', 'on');
  uimenu(infogen_menu, 'Label', 'Help', ...
    'callback', @help);
  uimenu(infogen_menu, 'Label', 'Quit', ...
    'callback', 'close all', ...
    'Separator', 'on', ...
    'Accelerator', 'Q');

  panel_infogen = uipanel(fig, 'title', 'General information', ...
    'position', [0. 0 1 1], ...
    'tag', 'INFOGEN', ...
    'visible', 'on');

  if debug_mode
    set(fig, 'Name', 'CTD-LADCP PreProcessing --DEBUG MODE--');
    set(Debug_Mode, 'Checked', 'on')
    set(Normal_Mode, 'Checked', 'off')
  end
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% Get configuration file
  config_filename = 'configuration.ini';
  if ~ exist([prefdir '\ctdSeaProcessing.mat'], 'file')
    config_filename = uigetfile('*.ini', 'Select configuration file .ini');
    p = configuration(config_filename);
  else
    ConfigFileName = ['\' mfilename '.mat'];
    ConfigFile = load([prefdir '' ConfigFileName]);
    p = ConfigFile.p;
  end
  %% Initialization
  p.rep_local = fileparts(which(mfilename));
  p.debug_mode = false;

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %% Mission and station parameters
  % Mission name
  uicontrol(panel_infogen, 'style', 'Text', ...
    'String', 'Mission Name', ...
    'units', 'normalized', ...
    'position', [- 0.05 0.96 0.45 0.02]);

  uicontrol(panel_infogen, 'style', 'edit', ...
    'units', 'normalized', ...
    'position', [0.1 0.93 0.4 0.03], ...
    'tag', 'NOMMISSION_ENTER', ...
    'string', p.name_mission, ...
    'callback', {@get_mission_para, 'name_mission'});

  % Mission ID
  uicontrol(panel_infogen, 'style', 'Text', ...
    'String', 'Mission ID', ...
    'units', 'normalized', ...
    'position', [0.4 0.96 0.34 0.02]);

  uicontrol(panel_infogen, 'style', 'edit', ...
    'units', 'normalized', ...
    'position', [0.53 0.93 0.1 0.03], ...
    'tag', 'IDMISSION_ENTER', ...
    'string', p.id_mission, ...
    'callback', {@get_mission_para, 'id_mission'});

  % Station number
  uicontrol(panel_infogen, 'style', 'Text', ...
    'String', 'Station Number', ...
    'units', 'normalized', ...
    'position', [0.625 0.96 0.45 0.02]);

  uicontrol(panel_infogen, 'style', 'edit', ...
    'units', 'normalized', ...
    'position', [0.8 0.91 0.1 0.05], ...
    'BackgroundColor', 'white', ...
    'tag', 'NUMSTATION_ENTER', ...
    'TooltipString', '''XXX''', ...
    'string', p.num_station, ...
    'callback', {@get_mission_para, 'num_station'});

  % Selection du fichier de configuration .mat
  uicontrol(panel_infogen, 'style', 'Text', ...
    'String', 'Configuration Filename .ini', ...
    'units', 'normalized', ...
    'position', [0.03 0.88 0.45 0.02]);

  ctd_infogen = uicontrol(panel_infogen, 'style', 'edit', ...
    'units', 'normalized', ...
    'position', [0.1 0.85 0.6 0.03], ...
    'tag', 'FILENAMECTD_ENTER', ...
    'string', config_filename, ...
    'TooltipString', 'Parameters and paths', ...
    'callback', {@get_mission_para, 'config_filename'});

  uicontrol(panel_infogen, 'string', 'Select', ...
    'units', 'normalized', ...
    'position', [0.71 0.85 0.1 0.03], ...
    'tag', 'FILENAMECTD_CHOOSE', ...
    'userdata', ctd_infogen, ...
    'callback', {@choose_configfile});

  %% Panel CTD
  panel_CTD = uipanel('parent', panel_infogen, ...
    'title', 'CTD', ...
    'units', 'normalized', ...
    'position', [0.05 0.60 0.9 0.20]);

  % Option to copy CTD file
  msg = sprintf('Copy to :\n%s\n%s', p.path_rawCTD, p.path_processCTD);

  uicontrol(panel_CTD, 'style', 'checkbox', ...
    'units', 'normalized', ...
    'string', 'Copy CTD file to processing path', ...
    'TooltipString', msg, ...
    'position', [0.1 0.7 0.45 0.1], ...
    'tag', ' OPTION_COPY_CTD', ...
    'Value', p.copyctd, ...
    'callback', {@checkbox_value, 'copyctd'});

  % OptionPMEL
  uicontrol(panel_CTD, 'style', 'checkbox', ...
    'units', 'normalized', ...
    'string', 'PMEL Processing', ...
    'position', [0.8 0.7 0.20 0.1], ...
    'TooltipString', 'Specific processing for PMEL', ...
    'tag', 'OPTION_PMEL', ...
    'Value', 0, ...
    'callback', {@checkbox_value, 'processpmel'});

  % Option to process CTD file
  msg = sprintf('%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s', ...
    'Step :', 'sbe_ladcp', 'sbe_codac', 'sbe_std', 'sbe_plt', ...
    'sbe_report', 'sbe_btl', 'compress_codac');

  uicontrol(panel_CTD, 'style', 'checkbox', ...
    'units', 'normalized', ...
    'string', 'SeaBird CTD data PreProcessing', ...
    'TooltipString', msg, ...
    'position', [0.1 0.4 0.45 0.1], ...
    'tag', 'OPTION_PROCESS_CTD', ...
    'Value', p.processctd, ...
    'callback', {@checkbox_value, 'processctd'});

  %% Panel ADCP
  panel_ADCP = uipanel('parent', panel_infogen, ...
    'title', 'ADCP', ...
    'units', 'normalized', ...
    'position', [0.05 0.30 0.9 0.30]);

  % Select ADCP Master file
  uicontrol(panel_ADCP, 'style', 'Text', ...
    'String', 'ADCP Master filename', ...
    'units', 'normalized', ...
    'position', [0.03 0.8 0.45 0.08]);

  adcpm_infogen = uicontrol(panel_ADCP, 'style', 'edit', ...
    'units', 'normalized', ...
    'position', [0.1 0.7 0.6 0.09], ...
    'TooltipString', 'Original output ADCP Master filename', ...
    'tag', 'FILEADCPM_ENTER', ...
    'string', p.filename_adcpm, ...
    'callback', {@get_mission_para, 'filename_ADCPM'});

  uicontrol(panel_ADCP, 'string', 'Select', ...
    'units', 'normalized', ...
    'position', [0.71 0.7 0.1 0.09], ...
    'tag', 'FILEADCPM_CHOOSE', ...
    'userdata', adcpm_infogen, ...
    'callback', {@choose_adcpfile, 'filename_adcpm'});

  % Select ADCP Slave file
  uicontrol(panel_ADCP, 'style', 'Text', ...
    'String', 'ADCP slave filename', ...
    'units', 'normalized', ...
    'position', [0.03 0.6 0.45 0.08]);

  adcps_infogen = uicontrol(panel_ADCP, 'style', 'edit', ...
    'units', 'normalized', ...
    'position', [0.1 0.5 0.6 0.09], ...
    'TooltipString', 'Original output ADCP Slave filename', ...
    'tag', 'FILEADCPS_ENTER', ...
    'string', p.filename_adcps, ...
    'callback', {@get_mission_para, 'filename_ADCPS'});

  uicontrol(panel_ADCP, 'string', 'Select', ...
    'units', 'normalized', ...
    'position', [0.71 0.5 0.1 0.09], ...
    'tag', 'FILEADCPS_CHOOSE', ...
    'userdata', adcps_infogen, ...
    'callback', {@choose_adcpfile, 'filename_adcps'});

  % Option to copy ADCP file
  msg = sprintf('Rename to :\n%s and %s\nMove to :\n%s\nCopy to :\n%s\n%s', ...
    p.newfilename_ADCPM, p.newfilename_ADCPS, ...
    p.path_moveADCP, p.path_rawADCP, p.path_processADCP);

  uicontrol(panel_ADCP, 'style', 'checkbox', ...
    'units', 'normalized', ...
    'string', 'Copy ADCP file to processing path', ...
    'TooltipString', msg, ...
    'position', [0.1 0.3 0.45 0.08], ...
    'tag', 'OPTION_COPY_ADCP', ...
    'Value', p.copyadcp, ...
    'callback', {@checkbox_value, 'copyadcp'});

  % Option to process ADCP file
  uicontrol(panel_ADCP, 'style', 'checkbox', ...
    'units', 'normalized', ...
    'string', 'ADCP processing', ...
    'TooltipString', 'LDEO Processing', ...
    'position', [0.1 0.1 0.45 0.08], ...
    'tag', 'OPTION_PROCESS_ADCP', ...
    'Value', p.processadcp, ...
    'callback', {@checkbox_value, 'processadcp'});

  %% Valid and Cancel Button
  uicontrol(panel_infogen, 'style', 'pushbutton', ...
    'string', 'Valid', ...
    'units', 'normalized', ...
    'position', [0.1 0.05 0.4 0.1], ...
    'callback', @launcher);

  uicontrol(panel_infogen, 'style', 'pushbutton', ...
    'string', 'Cancel', ...
    'units', 'normalized', ...
    'position', [0.5 0.05 0.4 0.1], ...
    'callback', 'close all');

  %----------------------------------------------------------------------------------------------------------------------------------
  % Get mission parameter
  function get_mission_para(hObj, ~, member)
    p.(member) = get(hObj, 'string');
    if strcmp(member, 'num_station')
      p.filename_CTD = sprintf('%s', p.id_mission, p.num_station);
      p.newfilename_ADCPM = sprintf('%s', p.name_adcpmaster, p.num_station, '.000');
      p.newfilename_ADCPS = sprintf('%s', p.name_adcpslave, p.num_station, '.000');
    end
  end

  % Get configuration file
  function choose_configfile(hObj, ~)
    p.config_filename = uigetfile('*.ini', 'Select configuration file');
    if ~ p.config_filename
      msgbox('The file has not been selected !', 'Warn', 'error');
    else
      res = get(hObj, 'userdata');
      set(res, 'string', config_filename);
      p = configuration(config_filename);
    end
  end

  % Return checkbox value
  function checkbox_value(hObj, ~, member)
    if ~ get(hObj, 'value')
      p.(member) = false;
    elseif get(hObj, 'value')
      p.(member) = true;
    end
  end

  % Select ADCP files
  function choose_adcpfile(hObj, ~, member)
    p.(member) = uigetfile('*.000', 'Select file');
    if ~ p.(member)
      msgbox('The file has not been selected !', 'Warn', 'error');
    else
      res = get(hObj, 'userdata');
      set(res, 'string', p.(member))
    end
  end

  % Launch processing
  function launcher(~, ~)
    %% Save workspace
    save([prefdir '' mfilename '.mat']);
    p.debug_mode = debug_mode;
    launch_processing(p)
  end

  % Help
  function help(~, ~)
    fid_helpfile = fopen('readme.md');
    file = textscan(fid_helpfile, '%s', 'Delimiter', '\n');
    helpdlg(file{1, 1}, 'Help')
  end

  % Debug mode
  function DebugMode(~, ~)
    debug_mode = true;
    set(fig, 'Name', 'CTD-LADCP PreProcessing --DEBUG MODE--');
    set(Debug_Mode, 'Checked', 'on');
    set(Normal_Mode, 'Checked', 'off');
  end

  % Normal mode
  function NormalMode(~, ~)
    debug_mode = false;
    set(fig, 'Name', 'CTD-LADCP PreProcessing');
    set(Normal_Mode, 'Checked', 'on');
    set(Debug_Mode, 'Checked', 'off');
  end

end


